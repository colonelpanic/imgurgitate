// Generated by IcedCoffeeScript 1.2.0p
(function() {
  var arg, argv, browse_album, download_imgur, extract_img_urls, folder, fs, hash, hashes, htmlparser2, httpget, iced, imgur_album_url_pattern, imgur_hashes, imgur_hashes_pattern, imgur_image_pattern, imgur_url_pattern, list_user_images, path, prettyjson, request, rurl, underscore, user, util, __iced_deferrals,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    _this = this;

  iced = require('iced-coffee-script').iced;
  __iced_k = function() {};

  request = require('request');

  prettyjson = require('prettyjson');

  htmlparser2 = require('htmlparser2');

  underscore = require('underscore');

  httpget = require('http-get');

  path = require('path');

  fs = require('fs');

  util = require('util');

  imgur_url_pattern = RegExp("http://((www)|(i)\.)?imgur.com/[./a-zA-Z0-9&,]+", "ig");

  imgur_album_url_pattern = RegExp("imgur\.com/a/[a-zA-Z0-9]+", "i");

  imgur_hashes_pattern = RegExp("imgur\.com/(([a-zA-Z0-9]{5}[&,]?)+)", "i");

  imgur_image_pattern = RegExp("http://(www\.)?(i\.)?imgur\.com/.{3,7}\.((jpg)|(gif))", "ig");

  rurl = function(user, after) {
    if (after == null) after = null;
    return ("http://reddit.com/user/" + user + ".json") + (after ? "?after=" + after : "");
  };

  list_user_images = function(user, callback, after) {
    var contents, error, hashes, j, later, response, url, urls, ___iced_passed_deferral, __iced_deferrals,
      _this = this;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    if (after == null) after = null;
    url = rurl(user, after);
    console.log(url);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "imgurgitate.coffee",
        funcname: "list_user_images"
      });
      request(url, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            error = arguments[0];
            return response = arguments[1];
          };
        })(),
        lineno: 24
      }));
      __iced_deferrals._fulfill();
    })(function() {
      hashes = [];
      (function(__iced_k) {
        if (!error && response.statusCode === 200) {
          j = JSON.parse(response.body);
          if (!j.data) {
            console.warn(j);
            return;
          }
          after = j.data.after;
          urls = extract_img_urls(j.data.children);
          (function(__iced_k) {
            var _i, _len, _ref, _results, _while;
            _ref = urls;
            _len = _ref.length;
            _i = 0;
            _results = [];
            _while = function(__iced_k) {
              var _break, _continue, _next;
              _break = function() {
                return __iced_k(_results);
              };
              _continue = function() {
                ++_i;
                return _while(__iced_k);
              };
              _next = function(__iced_next_arg) {
                _results.push(__iced_next_arg);
                return _continue();
              };
              if (!(_i < _len)) {
                return _break();
              } else {
                url = _ref[_i];
                (function(__iced_k) {
                  if (imgur_album_url_pattern.exec(url)) {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "imgurgitate.coffee",
                        funcname: "list_user_images"
                      });
                      browse_album(url, __iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return contents = arguments[0];
                          };
                        })(),
                        lineno: 40
                      }));
                      __iced_deferrals._fulfill();
                    })(function() {
                      return __iced_k(hashes = hashes.concat(contents));
                    });
                  } else {
                    return __iced_k(hashes = hashes.concat(imgur_hashes(url)));
                  }
                })(_next);
              }
            };
            _while(__iced_k);
          })(function() {
            (function(__iced_k) {
              if (after) {
                later = [];
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "imgurgitate.coffee",
                    funcname: "list_user_images"
                  });
                  list_user_images(user, __iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return later = arguments[0];
                      };
                    })(),
                    lineno: 47
                  }), after);
                  __iced_deferrals._fulfill();
                })(function() {
                  return __iced_k(hashes = hashes.concat(later));
                });
              } else {
                return __iced_k();
              }
            })(__iced_k);
          });
        } else {
          if (error) {
            throw error;
          } else if (response.statusCode !== 200) {
            console.warn(response);
          }
          return __iced_k();
        }
      })(function() {
        return callback(hashes);
      });
    });
  };

  download_imgur = function(hash, user, callback) {
    var destination, err, extension, result, stats, timestamp, url, ___iced_passed_deferral, __iced_deferrals,
      _this = this;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    url = "http://i.imgur.com/" + hash + ".jpg";
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "imgurgitate.coffee",
        funcname: "download_imgur"
      });
      httpget.head({
        url: url
      }, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return result = arguments[1];
          };
        })(),
        lineno: 59
      }));
      __iced_deferrals._fulfill();
    })(function() {
      (function(__iced_k) {
        if (!err && result.code === 200 && result.headers['content-length'] !== 669) {
          extension = result.headers['content-type'].replace('image/', '');
          timestamp = new Date(result.headers['last-modified']);
          url = "http://i.imgur.com/" + hash + ".jpg";
          destination = path.join("" + user, "" + user + "-" + (timestamp.toISOString().replace(/:/g, '.')) + "-" + hash + "." + extension);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "imgurgitate.coffee",
              funcname: "download_imgur"
            });
            fs.stat(destination, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  return stats = arguments[1];
                };
              })(),
              lineno: 65
            }));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              if (!err && stats.size === parseInt(result.headers['content-length'])) {
                return __iced_k(console.log(url, destination, 'previously'));
              } else {
                console.log(url, destination);
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "imgurgitate.coffee",
                    funcname: "download_imgur"
                  });
                  httpget.get({
                    url: url
                  }, destination, __iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        err = arguments[0];
                        return result = arguments[1];
                      };
                    })(),
                    lineno: 70
                  }));
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "imgurgitate.coffee",
                      funcname: "download_imgur"
                    });
                    fs.utimes(destination, timestamp, timestamp, __iced_deferrals.defer({
                      lineno: 71
                    }));
                    __iced_deferrals._fulfill();
                  })(__iced_k);
                });
              }
            })(__iced_k);
          });
        } else {
          return __iced_k();
        }
      })(function() {
        return callback(err);
      });
    });
  };

  imgur_hashes = function(url) {
    var hashes, match;
    hashes = [];
    match = imgur_hashes_pattern.exec(url);
    if (match) hashes = match[1].split(/[,&]/);
    return hashes;
  };

  browse_album = function(url, callback) {
    var element, error, handler, hash, hashes, parser, response, ___iced_passed_deferral, __iced_deferrals,
      _this = this;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    hashes = [];
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "imgurgitate.coffee",
        funcname: "browse_album"
      });
      request(url, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            error = arguments[0];
            return response = arguments[1];
          };
        })(),
        lineno: 86
      }));
      __iced_deferrals._fulfill();
    })(function() {
      var _i, _len, _ref;
      if (!error && response.statusCode === 200) {
        handler = new htmlparser2.DefaultHandler();
        parser = new htmlparser2.Parser(handler);
        parser.parseComplete(response.body);
        _ref = htmlparser2.DomUtils.getElements({
          "class": "image"
        }, handler.dom);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          hash = element.attribs['id'];
          hashes.push(hash);
        }
      }
      return callback(hashes);
    });
  };

  extract_img_urls = function(children) {
    var created_utc, d, match, text, thing, type, url, urls, _i, _len, _ref;
    urls = [];
    for (_i = 0, _len = children.length; _i < _len; _i++) {
      thing = children[_i];
      type = null;
      d = thing.data;
      if ((argv.whitelist != null) && (_ref = d.subreddit, __indexOf.call(argv.whitelist.split(','), _ref) < 0)) {
        continue;
      }
      created_utc = d.created_utc;
      if (thing.kind === 't1') {
        type = 'comment';
      } else if (thing.kind === 't3') {
        type = 'post';
        match = imgur_url_pattern.exec(d.url);
        if (match) {
          url = match[0];
          urls.push(url);
        }
      }
      if (d.body) {
        text = d.body;
        while ((match = imgur_url_pattern.exec(text))) {
          url = match[0];
          urls.push(url);
        }
      }
    }
    return urls;
  };

  if (!module.parent) {
    argv = require('optimist').usage("Download a Redditor's imgur uploads to disk\nUsage: $0 user1 [user2]").demand(1).argv;
    (function(__iced_k) {
      var _i, _len, _ref, _results, _while;
      _ref = argv._;
      _len = _ref.length;
      _i = 0;
      _results = [];
      _while = function(__iced_k) {
        var _break, _continue, _next;
        _break = function() {
          return __iced_k(_results);
        };
        _continue = function() {
          ++_i;
          return _while(__iced_k);
        };
        _next = function(__iced_next_arg) {
          _results.push(__iced_next_arg);
          return _continue();
        };
        if (!(_i < _len)) {
          return _break();
        } else {
          arg = _ref[_i];
          user = arg;
          console.log(user);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              filename: "imgurgitate.coffee"
            });
            list_user_images(user, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return hashes = arguments[0];
                };
              })(),
              lineno: 126
            }));
            __iced_deferrals._fulfill();
          })(function() {
            hashes = underscore.unique(hashes);
            folder = "" + user;
            if (!path.existsSync(folder)) fs.mkdirSync(folder);
            (function(__iced_k) {
              var _j, _len2, _ref2, _results2, _while;
              _ref2 = hashes;
              _len2 = _ref2.length;
              _j = 0;
              _results2 = [];
              _while = function(__iced_k) {
                var _break, _continue, _next;
                _break = function() {
                  return __iced_k(_results2);
                };
                _continue = function() {
                  ++_j;
                  return _while(__iced_k);
                };
                _next = function(__iced_next_arg) {
                  _results2.push(__iced_next_arg);
                  return _continue();
                };
                if (!(_j < _len2)) {
                  return _break();
                } else {
                  hash = _ref2[_j];
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      filename: "imgurgitate.coffee"
                    });
                    download_imgur(hash, user, __iced_deferrals.defer({
                      lineno: 132
                    }));
                    __iced_deferrals._fulfill();
                  })(_next);
                }
              };
              _while(__iced_k);
            })(_next);
          });
        }
      };
      _while(__iced_k);
    })(__iced_k);
  } else {
    __iced_k();
  }

}).call(this);
